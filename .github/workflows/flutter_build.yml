name: Flutter Builder

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build Flutter APK & Windows Installer
    runs-on: windows-latest

    env:
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          cache: true
      
      - name: Set ANDROID_SDK_ROOT
        shell: pwsh
        run: |
          echo "ANDROID_SDK_ROOT=$env:ANDROID_HOME" >> $env:GITHUB_ENV

      - name: Cache NDK
        id: ndk-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_SDK_ROOT }}\\ndk\\27.0.12077973
          key: ndk-27.0.12077973

      - name: Install NDK 27.0.12077973 (if not cached)
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          & "${env:ANDROID_SDK_ROOT}\cmdline-tools\latest\bin\sdkmanager.bat" "ndk;27.0.12077973"

      - name: Set NDK environment variable
        shell: pwsh
        run: |
          echo "ANDROID_NDK_HOME=${env:ANDROID_SDK_ROOT}\ndk\27.0.12077973" >> $env:GITHUB_ENV
          echo "ANDROID_NDK_ROOT=${env:ANDROID_SDK_ROOT}\ndk\27.0.12077973" >> $env:GITHUB_ENV

      - name: Cache Gradle & Android build
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.USERPROFILE }}\\.gradle\\caches
            ${{ env.USERPROFILE }}\\.gradle\\wrapper
            ${{ env.USERPROFILE }}\\.android\\build-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Install dependencies
        run: flutter pub get

      - name: Create .env file
        shell: pwsh
        run: |
          Set-Content -Encoding utf8 .env "SUPABASE_PROJ=${{ secrets.SUPABASE_PROJ }}"
          Add-Content .env "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}"
          Add-Content .env "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}"
          Add-Content .env "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}"
          Add-Content .env "KEYSTORE_FILE=${{ secrets.KEYSTORE_FILE }}"
          Add-Content .env "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}"
          Add-Content .env "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}"
          Add-Content .env "KEY_ALIAS=${{ secrets.KEY_ALIAS }}"

      - name: Decode and decrypt keystore zip
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("keystore.zip.gpg", [Convert]::FromBase64String("${{ secrets.KEYSTORE_ZIP }}"))
          & gpg --batch --yes --passphrase "${{ secrets.STORE_PASSWORD }}" --output keystore.zip --decrypt keystore.zip.gpg
          Expand-Archive -Path keystore.zip -DestinationPath android/app -Force

      - name: Get app version
        id: version
        shell: pwsh
        run: |
          $versionLine = Select-String -Path "pubspec.yaml" -Pattern "^version: .*?\+.*" | ForEach-Object { $_.Line }
          $version = $versionLine -replace "version: ([^+]+)\+.*", '$1'
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build APK (split per ABI)
        run: flutter build apk --release --split-per-abi --dart-define-from-file=.env

      - name: Rename APKs
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "renamed-apks" -Force | Out-Null
          Get-ChildItem -Path "build\app\outputs\flutter-apk\app-*-release.apk" | ForEach-Object {
            if ($_.Name -match 'app-(.*)-release\.apk') {
              $abi = $matches[1]
              $dest = "renamed-apks\SigaAutomator-${{ steps.version.outputs.version }}_$abi.apk"
              Move-Item -Path $_.FullName -Destination $dest
            }
          }

      - name: Build Windows App
        run: flutter build windows --release --dart-define-from-file=.env

      - name: Modify .iss with version and output dir
        shell: pwsh
        run: |
          (Get-Content "build_tools\pack_windows.iss") `
            -replace '^AppVersion=.*', "AppVersion=${{ steps.version.outputs.version }}" `
            -replace '^OutputDir=.*', 'OutputDir="..\\windows-installer"' `
            -replace '^OutputBaseFilename=.*', "OutputBaseFilename=SigaAutomator-${{ steps.version.outputs.version }}_win_64" `
            -replace '^Source: .*', 'Source: "..\\build\\windows\\x64\\runner\\Release\\*"; DestDir: "{app}"; Flags: recursesubdirs createallsubdirs' `
            | Set-Content "build_tools\pack_windows.iss"

      - name: Install Inno Setup
        run: choco install innosetup --no-progress

      - name: Create Windows Installer with Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "build_tools\pack_windows.iss"

      - name: Collect all artifacts into one folder
        shell: pwsh
        run: |
          $targetDir = "release-artifacts"
          New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
          Copy-Item -Path "renamed-apks\*" -Destination $targetDir -Force
          Copy-Item -Path "windows-installer\*.exe" -Destination $targetDir -Force

      - name: Upload All Artifacts (APK + Windows)
        uses: actions/upload-artifact@v4
        with:
          name: SigaAutomator-${{ steps.version.outputs.version }}
          path: release-artifacts

      - name: Generate Changelog from Git Commits
        id: changelog
        if: github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          $changelog = git log (git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s"
          echo "changelog<<EOF" >> $env:GITHUB_OUTPUT
          $changelog | Out-File -Encoding utf8 -Append $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: SigaAutomator v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
